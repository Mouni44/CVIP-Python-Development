###   Typing Speed tester   ###

import random
import time
sample_texts=[
    "The quick brown fox jumps over the lazy dog."
    "Coding is fun and challenging at the same time."
    "Practice makes perfect."
]
def calculate_typing_speed(text,start_time,end_time):
    words=text.split()
    new_words=len(words)
    elapsed_time=end_time-start_time
    wpm=(len(words)/elapsed_time)*60
    return wpm
def typing_speed_text():
    sample_text=random.choice(sample_texts)
    print("type the following text:")
    print(sample_text)
    print("Press Enter to start typing...")
    start_time=time.time()
    user_input=input("Start typing:")
    end_time=time.time()
    wpm=calculate_typing_speed(sample_text,start_time,end_time)
    print(f"Your typing speed: {wpm:.2f} WPM")
if __name__=="__main__":
    while True:
        typing_speed_text()
        play_again=input("Do you want to play again? (yes/no):").lower()
        if play_again!="yes":
            break
        
###   Voice Recorder   ###

import tkinter as tk
import sounddevice as sd
import numpy as np
import threading
import wave

class VoiceRecorder:
    def __init__(self, root):
        self.root = root
        self.root.title("Voice Recorder")

        self.record_button = tk.Button(root, text="Record", command=self.start_recording)
        self.stop_button = tk.Button(root, text="Stop", state=tk.DISABLED, command=self.stop_recording)

        self.record_button.pack()
        self.stop_button.pack()

        self.audio_data = []
        self.recording = False

    def start_recording(self):
        self.recording = True
        self.record_button.config(state=tk.DISABLED)
        self.stop_button.config(state=tk.NORMAL)

        def record_audio():
            with sd.InputStream(callback=self.audio_callback):
                sd.sleep(1000)

        self.audio_data = []
        threading.Thread(target=record_audio).start()

    def stop_recording(self):
        self.recording = False
        self.record_button.config(state=tk.NORMAL)
        self.stop_button.config(state=tk.DISABLED)

        if self.audio_data:
            self.save_audio()

    def audio_callback(self, indata, frames, time, status):
        if self.recording:
            self.audio_data.append(indata.copy())

    def save_audio(self):
        filename = "recording.wav"
        with wave.open(filename, 'wb') as wf:
            wf.setnchannels(2)
            wf.setsampwidth(2)
            wf.setframerate(44100)
            wf.writeframes(b''.join(self.audio_data))
        print(f"Recording saved as {filename}")

if __name__ == "__main__":
    root = tk.Tk()
    app = VoiceRecorder(root)
    root.mainloop()
